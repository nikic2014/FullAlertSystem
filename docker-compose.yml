version: '3.8'

services:
  postgres:
    build: PostgresInit
    environment:
      POSTGRES_DB: AlertSystem
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 2105
    volumes:
      - ./PostgresDockerData:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 3
      
  kafka:
    build: KafkaInitDocker
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      - zookeeper

  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    ports:
      - "2181:2181"

  backend-alert-api:
    build:
      context: ./backendSiteDiplom
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    environment:
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
    
  frontend:
    build:
      context: ./frontendAlertSystem
      dockerfile: Dockerfile
    ports:
      - "5500:5500"

  alertapi:
    build:
      context: ./AlertAPI
      dockerfile: Dockerfile
    ports:
      - "8181:8181"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    environment:
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://kafka:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
    ports:
      - "9092:9092"
    healthcheck:
      test: ["CMD", "kafka-topics", "--list", "--bootstrap-server", "kafka:9092"]
      interval: 5s
      timeout: 10s
      retries: 5
      
  create-topic:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - kafka
    entrypoint: 
      - bash
      - -c
      - |
        echo 'Waiting for Kafka to be ready...'
        while ! kafka-topics --list --bootstrap-server kafka:9092; do sleep 1; done
        kafka-topics --create --topic telegram-alert --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1

  bot:
    build:
      context: ./AlertSystemBot
      dockerfile: Dockerfile
    depends_on:
      - kafka
      - backend-alert-api
      

